source: RDKM (aishwarya_natarajan2@comcast.com)
diff -Naur kernel-source.orig/include/linux/netfilter/x_tables.h kernel-source/include/linux/netfilter/x_tables.h
--- kernel-source.orig/include/linux/netfilter/x_tables.h	2024-01-25 07:03:29.804607207 +0000
+++ kernel-source/include/linux/netfilter/x_tables.h	2024-01-25 07:06:54.767088909 +0000
@@ -36,6 +36,7 @@
 		const void *matchinfo, *targinfo;
 	};
 	const struct nf_hook_state *state;
+	unsigned int 	hooknum;
 	unsigned int thoff;
 	u16 fragoff;
 	bool hotdrop;
diff -Naur kernel-source.orig/include/linux/timer.h kernel-source/include/linux/timer.h
--- kernel-source.orig/include/linux/timer.h	2024-01-25 07:03:30.080594390 +0000
+++ kernel-source/include/linux/timer.h	2024-01-25 07:07:47.632633875 +0000
@@ -15,6 +15,7 @@
 	 */
 	struct hlist_node	entry;
 	unsigned long		expires;
+	unsigned long		data;
 	void			(*function)(struct timer_list *);
 	u32			flags;
 
diff -Naur kernel-source.orig/include/net/netfilter/nf_conntrack.h kernel-source/include/net/netfilter/nf_conntrack.h
--- kernel-source.orig/include/net/netfilter/nf_conntrack.h	2024-01-25 07:03:30.252586403 +0000
+++ kernel-source/include/net/netfilter/nf_conntrack.h	2024-01-25 07:08:55.333489879 +0000
@@ -23,6 +23,7 @@
 #include <linux/netfilter/nf_conntrack_proto_gre.h>
 
 #include <net/netfilter/nf_conntrack_tuple.h>
+#define NF_CT_ASSERT(x)
 
 struct nf_ct_udp {
 	unsigned long	stream_ts;
diff -Naur kernel-source.orig/net/ipv4/netfilter/ipt_TRIGGER.c kernel-source/net/ipv4/netfilter/ipt_TRIGGER.c
--- kernel-source.orig/net/ipv4/netfilter/ipt_TRIGGER.c	2024-01-25 07:03:30.900556312 +0000
+++ kernel-source/net/ipv4/netfilter/ipt_TRIGGER.c	2024-01-25 07:20:59.803153474 +0000
@@ -79,7 +79,7 @@
 {
 	DEBUGP( KERN_LEVL "%s: \n", __FUNCTION__);
 	NF_CT_ASSERT(trig);
-    spin_lock_bh(&nf_conntrack_lock);
+    spin_lock_bh(&nf_conntrack_expect_lock);
 
 	/* Need del_timer for race avoidance (may already be dying). */
 	if (del_timer(&trig->timeout)) {
@@ -87,7 +87,7 @@
 		add_timer(&trig->timeout);
 	}
 
-    spin_unlock_bh(&nf_conntrack_lock);
+    spin_unlock_bh(&nf_conntrack_expect_lock);
 }
 
 static void __del_trigger(struct ipt_trigger *trig)
@@ -100,14 +100,14 @@
 	kfree(trig);
 }
 
-static void trigger_timeout(unsigned long ul_trig)
+static void trigger_timeout(struct timer_list *t)
 {
-	struct ipt_trigger *trig= (void *) ul_trig;
+	struct ipt_trigger *trig= from_timer(trig, t,timeout);
 
 	DEBUGP( KERN_LEVL "trigger list %p timed out\n", trig);
-	spin_lock_bh(&nf_conntrack_lock);
+	spin_lock_bh(&nf_conntrack_expect_lock);
 	__del_trigger(trig);
-    spin_unlock_bh(&nf_conntrack_lock);
+    spin_unlock_bh(&nf_conntrack_expect_lock);
 }
 
 static unsigned int
@@ -116,12 +116,12 @@
 	struct ipt_trigger *new;
 
 	DEBUGP( KERN_LEVL "!!!!!!!!!!!! %s !!!!!!!!!!!\n", __FUNCTION__);
-	spin_lock_bh(&nf_conntrack_lock);
+	spin_lock_bh(&nf_conntrack_expect_lock);
 	new = (struct ipt_trigger *)
 		kmalloc(sizeof(struct ipt_trigger), GFP_ATOMIC);
 
 	if (!new) {
-		spin_unlock_bh(&nf_conntrack_lock);
+		spin_unlock_bh(&nf_conntrack_expect_lock);
 		DEBUGP( KERN_LEVL "%s: OOM allocating trigger list\n", __FUNCTION__);
 		return -ENOMEM;
 	}
@@ -133,13 +133,13 @@
 	/* add to global table of trigger */
 	list_add(&trigger_list, &new->list);
 	/* add and start timer if required */
-	init_timer(&new->timeout);
+	//init_timer(&new->timeout);
 	new->timeout.data = (unsigned long)new;
 	new->timeout.function = trigger_timeout;
 	new->timeout.expires = jiffies + (TRIGGER_TIMEOUT * HZ);
-	add_timer(&new->timeout);
+	timer_setup(&new->timeout,trigger_timeout,0);
 		   
-    spin_unlock_bh(&nf_conntrack_lock);
+    spin_unlock_bh(&nf_conntrack_expect_lock);
 
     return 0;
 }
@@ -304,7 +304,7 @@
     return XT_CONTINUE;	/* the match was done but no trigger exist  */
 }
 
-static void xt_nat_convert_range(struct nf_nat_range *dst,
+static void xt_nat_convert_range(struct nf_nat_range2 *dst,
 				 const struct nf_nat_ipv4_range *src)
 {
 	memset(&dst->min_addr, 0, sizeof(dst->min_addr));
@@ -333,7 +333,7 @@
     struct nf_conn *ct;
 	enum ip_conntrack_info ctinfo;
 	struct nf_nat_ipv4_multi_range_compat newrange;
-    struct nf_nat_range range;
+    struct nf_nat_range2 range_info;
 
 	DEBUGP( KERN_LEVL "####Starting  %s ############\n", __FUNCTION__);
     DEBUGP( KERN_LEVL "TRIGGER_DNAT: Protocol ->%s  SRC_IP->%pI4"
@@ -368,7 +368,7 @@
 	newrange.range[0].min.all = 0;
 	newrange.range[0].min.all = 0;
 
-	xt_nat_convert_range(&range, &newrange.range[0]);
+	xt_nat_convert_range(&range_info, &newrange.range[0]);
 
         /* 
 	*  We call here to create the nat processor  that will replace packet source address 
@@ -385,7 +385,7 @@
         */
 	
 	/* Alter the destination of incoming packet. */
-	return nf_nat_setup_info(ct, &range, NF_NAT_MANIP_DST);
+	return nf_nat_setup_info(ct, &range_info, NF_NAT_MANIP_DST);
 }
 
 
